import os
from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.database import save_order
import re
from bot.config import ADMIN_ID

router = Router()


class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    choosing_service = State()
    confirming_order = State()


@router.message(F.text == "üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    print("[FSM] –°—Ç–∞—Ä—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderStates.waiting_for_name)


@router.message(OrderStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    print(f"[FSM] –í–≤–æ–¥ –∏–º–µ–Ω–∏: {message.text}")
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)


@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    print(f"[FSM] –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}")
    phone = message.text.strip()

    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä
    if not re.fullmatch(r"\+?\d{10,15}", phone):
        await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(phone=phone)

    service_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –†–µ–º–æ–Ω—Ç", callback_data="service_repair")],
        [InlineKeyboardButton(text="üßπ –£–±–æ—Ä–∫–∞", callback_data="service_cleaning")],
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="service_delivery")]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=service_keyboard)
    await state.set_state(OrderStates.choosing_service)


@router.callback_query(F.data.startswith("service_"), OrderStates.choosing_service)
async def process_service(callback: CallbackQuery, state: FSMContext):
    service = callback.data.replace("service_", "")
    print(f"[FSM] –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏: {service}")
    await state.update_data(service=service)

    data = await state.get_data()
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

    await callback.message.answer(
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–£—Å–ª—É–≥–∞: {service.capitalize()}",
        reply_markup=confirm_keyboard
    )
    await state.set_state(OrderStates.confirming_order)
    await callback.answer()


@router.callback_query(F.data == "confirm", OrderStates.confirming_order)
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    if not all(k in data for k in ['name', 'phone', 'service']):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ–ø–æ–ª–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    print(f"[FSM] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {data}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    save_order(
        name=data.get("name"),
        phone=data.get("phone"),
        service=data.get("service")
    )
    await callback.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.clear()
    await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    bot: Bot = callback.bot
    await bot.send_message(
        ADMIN_ID,
        f"üì¨ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–£—Å–ª—É–≥–∞: {data['service']}"
    )


@router.callback_query(F.data == "cancel", OrderStates.confirming_order)
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    print("[FSM] –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    await state.clear()
    await callback.answer()
