import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from bot.config import BOT_TOKEN
from bot.handlers import order
from bot.database import init_db
import logging


async def main():
    logging.basicConfig(level=logging.INFO)

    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()

    print("üîÑ main.py –∑–∞–ø—É—â–µ–Ω")
    print("Token:", BOT_TOKEN)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω dispatcher —Å FSM-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    dp = Dispatcher(storage=MemoryStorage())

    # –û—Å–Ω–æ–≤–Ω–æ–π router
    router = Router()

    # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    main_reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @router.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–∏–∑–Ω–µ—Å-–±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                             reply_markup=main_reply_keyboard)

    # Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="order")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data="contact")],
        [InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", callback_data='reviews')]
    ])

    @router.message(Command("menu"))
    async def cmd_menu(message: Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

    @router.callback_query(F.data.in_({"order", "contact", "help", "reviews"}))
    async def process_callback(callback: CallbackQuery):
        if callback.data == "order":
            await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º!")
        elif callback.data == "contact":
            await callback.message.answer("–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        elif callback.data == "help":
            await callback.message.answer("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ö–æ–º–∞–Ω–¥—ã: /start, /menu")
        elif callback.data == 'reviews':
            await callback.message.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤!')

        await callback.answer("–°–ø–∞—Å–∏–±–æ!", show_alert=True)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –æ–¥–∏–Ω —Ä–∞–∑
    dp.include_router(router)
    dp.include_router(order.router)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling...")

    await dp.start_polling(bot)
    print('asfd')


if __name__ == "__main__":
    try:
        print("üîÅ –ó–∞–ø—É—Å–∫ asyncio")
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
